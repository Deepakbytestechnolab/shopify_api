c
a.price
a=variant.update(price: new_price)
variant.update(price: new_price)
new_price = (variant.price * 1.15).round(2)
sales_last_7_days >= 3
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
ales_last_7_days
c
variant.shopify_id
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
n
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
c
sales_last_7_days
n
sales_last_7_days
n
sales_last_7_days
n
sales_last_7_days
n
sales_last_7_days
n
c
variant.shopify_id
sales_last_7_days >= 50
sales_last_7_days
n
sales_last_7_days
n
variant.price
n
m
n
orders.count
orders = fetch_orders_last_7_days
n
variant.shopify_id
sales_last_7_days = calculate_variant_sales_last_7_days(variant.shopify_id)
c
n
variant_id
 orders = fetch_orders_last_7_days
c
cc
variant.shopify_id
sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
sales_last_7_days
n
c
variant.shopify_id
sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
c
nc
nnn
n
nn
n
nn
n
nn
n
nn
n
c
 sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
sales_last_7_days
variant.shopify_id
n
variant.shopify_id
sales_last_7_days
n
c
variant.shopify_id
sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
n
c
n
 sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
n
 sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
variant.shopify_id
sales_last_7_days = fetch_variant_sales_last_7_days(variant.shopify_id)
n
start_time = 7.days.ago.utc.iso8601
n
products.each do |product|  end
products.each do |product|
product.variants
products
n
c
ShopifyGraphqlClient.update_prices_based_on_sales
product.variants
n
 products = Product.includes(:variants).count
c
n
products.variant.sku
products.last
products.last.price
products.last
n
products.last
c
n
products = Product.includes(:variants)
c
n
 products.count
n
 products.count
c
n
sales_data = fetch_sales_data
fetch_sales_data
c
n
 products.counts
 products.count
